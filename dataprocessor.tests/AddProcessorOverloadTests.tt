<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Linq;
using System.Linq.Expressions;
using NUnit.Framework;
using dataprocessor;

namespace dataprocessor.tests
{
    public class AddProcessorOverloadTests
    {
        private const string I = "i";
        private DataProcessorBuilder _b;
        private Writer<int> _i;
        private int _actual;

        [SetUp]
        public void Setup()
        {
            _actual = 0;
            _b = new DataProcessorBuilder();
            _i = _b.AddInput<int>(I);
            _b.AddListener<int>("o", o => _actual = o);
        }
<# 
for (var size = 1; size < 17; size++) {
    var ps = string.Join(", ", Enumerable.Range(1, size).Select(s => "p" + s));
    var ts = string.Join(", ", Enumerable.Repeat("int", size + 1));
    var ts2 = string.Join(", ", Enumerable.Repeat("int", size)) + ", Maybe<int>";
    var iis = string.Join(", ", Enumerable.Repeat("I", size));
#>

        [Test]
        public void AddProcessor<#=size#>_ArgChecks()
        {
            Func<<#=ts#>> func = (<#=ps#>) => Sum(<#=ps#>);
<# for(int i = 1; i <= size; i++) { 
    var a = string.Join("", Enumerable.Repeat("I, ", i - 1));
    var b = string.Join("", Enumerable.Repeat(", I", size - i));
#>
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessor<<#=ts#>>(<#=a#>null<#=b#>, "o", func));
<# } #>
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessor<<#=ts#>>(<#=iis#>, null, func));
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessor<<#=ts#>>(<#=iis#>, "o", null));
        }

        [Test]
        public void AddProcessor<#=size#>()
        {
            Func<<#=ts#>> func = (<#=ps#>) => Sum(<#=ps#>);
            _b.AddProcessor<<#=ts#>>(<#=iis#>, "o", func);
            RunAndAssert(<#=size#>);
        }

        [Test]
        public void AddProcessorMaybe<#=size#>_ArgChecks()
        {
            Func<<#=ts2#>> func = (<#=ps#>) => Maybe<int>.Just(Sum(<#=ps#>));
<# for(int i = 1; i <= size; i++) { 
    var a = string.Join("", Enumerable.Repeat("I, ", i - 1));
    var b = string.Join("", Enumerable.Repeat(", I", size - i));
#>
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessor<<#=ts#>>(<#=a#>null<#=b#>, "o", func));
<# } #>
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessor<<#=ts#>>(<#=iis#>, null, func));
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessor<<#=ts#>>(<#=iis#>, "o", null));
        }

        [Test]
        public void AddProcessorMaybe<#=size#>()
        {
            _b.AddProcessor<<#=ts#>>(<#=iis#>, "o", (<#=ps#>) => Maybe<int>.Just(Sum(<#=ps#>)));
            RunAndAssert(<#=size#>);
        }

        [Test]
        public void AddProcessorExpression<#=size#>_ArgChecks()
        {
            Expression<Func<<#=ts#>>> func = (<#=ps#>) => Sum(<#=ps#>);
<# for(int i = 1; i <= size; i++) { 
    var a = string.Join("", Enumerable.Repeat("I, ", i - 1));
    var b = string.Join("", Enumerable.Repeat(", I", size - i));
#>
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessorExpression<<#=ts#>>(<#=a#>null<#=b#>, "o", func));
<# } #>
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessorExpression<<#=ts#>>(<#=iis#>, null, func));
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessorExpression<<#=ts#>>(<#=iis#>, "o", null));
        }

        [Test]
        public void AddProcessorExpression<#=size#>()
        {
            _b.AddProcessorExpression<<#=ts#>>(<#=iis#>, "o", (<#=ps#>) => Sum(<#=ps#>));
            RunAndAssert(<#=size#>);
        }

        [Test]
        public void AddProcessorExpressionMaybe<#=size#>_ArgChecks()
        {
            Expression<Func<<#=ts2#>>> func = (<#=ps#>) => Sum(<#=ps#>);
<# for(int i = 1; i <= size; i++) { 
    var a = string.Join("", Enumerable.Repeat("I, ", i - 1));
    var b = string.Join("", Enumerable.Repeat(", I", size - i));
#>
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessorExpression<<#=ts#>>(<#=a#>null<#=b#>, "o", func));
<# } #>
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessorExpression<<#=ts#>>(<#=iis#>, null, func));
            Assert.Throws<ArgumentNullException>(() => _b.AddProcessorExpression<<#=ts#>>(<#=iis#>, "o", null));
        }

        [Test]
        public void AddProcessorExpressionMaybe<#=size#>()
        {
            _b.AddProcessorExpression<<#=ts#>>(<#=iis#>, "o", (<#=ps#>) => Maybe<int>.Just(Sum(<#=ps#>)));
            RunAndAssert(<#=size#>);
        }
<# } #>

        private int Sum(params int[] parms) => parms.Sum();

        private void RunAndAssert(int i)
        {
            var d = _b.Build();
            _i.Send(1);
            Assert.AreEqual(i, _actual);
        }
    }
}
