<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Linq;
using NUnit.Framework;
using dataprocessor;

namespace dataprocessor.tests
{
    public class AddListenerOverloadTests
    {
        private const string I = "i";
        private DataProcessorBuilder _b;
        private Writer<int> _i;
        private int _actual;

        [SetUp]
        public void Setup()
        {
            _actual = 0;
            _b = new DataProcessorBuilder();
            _i = _b.AddInput<int>(I);
        }
<# 
for (var size = 1; size < 8; size++) {
    var ps = string.Join(", ", Enumerable.Range(1, size).Select(s => "p" + s));
    var ts = string.Join(", ", Enumerable.Repeat("int", size));
    var iis = string.Join(", ", Enumerable.Repeat("I", size));
#>

        [Test]
        public void AddListener<#=size#>()
        {
            _b.AddListener<<#=ts#>>(<#=iis#>, (<#=ps#>) => Sum(<#=ps#>));
            RunAndAssert(<#=size#>);
        }

        [Test]
        public void AddListenerExpression<#=size#>()
        {
            _b.AddListenerExpression<<#=ts#>>(<#=iis#>, (<#=ps#>) => Sum(<#=ps#>));
            RunAndAssert(<#=size#>);
        }
<# } #>

        private int Sum(params int[] parms) => _actual = parms.Sum();

        private void RunAndAssert(int i)
        {
            var d = _b.Build();
            _i.Send(1);
            Assert.AreEqual(i, _actual);
        }
    }
}
