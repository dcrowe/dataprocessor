<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System;
using System.Linq.Expressions;

namespace dataprocessor
{
    public static class DataProcessorBuilderExtensions
    {
<# 
    var max_args = 8;
    for (var size = 1; size < max_args; size++) {
        var vs = Enumerable.Range(1, size).ToList();
        var types = string.Join(", ", vs.Select(i => "T" + i));
        var ps = string.Join(", ", vs.Select(i => "p" + i));
        var ns = string.Join(", ", vs.Select(i => "n" + i));
        var names = string.Join(", ", vs.Select(i => "name" + i));
#>
        public static void AddListenerExpression<<#=types#>>(
            this IDataProcessorBuilder builder,
<# foreach(var i in vs) { #>
            string name<#=i#>,
<# } #>
            Expression<Action<<#=types#>>> action)
        {
            if (builder == null)
                throw new ArgumentException(nameof(builder));
            if (action == null)
                throw new ArgumentException(nameof(action));
<# foreach(var i in vs) { #>

            if (name<#=i#> == null)
                throw new ArgumentException(nameof(name<#=i#>));
            var n<#=i#> = NameType.From<T<#=i#>>(name<#=i#>);
<# } #>

            builder.AddListener(action, <#=ns#>);
        }

        public static void AddListener<<#=types#>>(
            this IDataProcessorBuilder builder,
<# foreach(var i in vs) { #>
            string name<#=i#>,
<# } #>
            Action<<#=types#>> action)
        {
            if (builder == null)
                throw new ArgumentException(nameof(builder));
            if (action == null)
                throw new ArgumentException(nameof(action));
<# foreach(var i in vs) { #>

            if (name<#=i#> == null)
                throw new ArgumentException(nameof(name<#=i#>));
            var p<#=i#> = Expression.Parameter(typeof(T<#=i#>), name<#=i#>);
<# } #>

            var expr = Expression.Lambda<Action<<#=types#>>>(
                Expression.Invoke(
                    Expression.Constant(action), 
                    <#=ps#>),
                <#=ps#>);

            builder.AddListenerExpression(<#=names#>, expr);
        }

        public static void AddProcessorExpression<<#=types#>, TResult>(
            this IDataProcessorBuilder builder,
<# foreach(var i in vs) { #>
            string name<#=i#>,
<# } #>
            string nameResult,
            Expression<Func<<#=types#>, TResult>> function)
        {
            if (builder == null)
                throw new ArgumentException(nameof(builder));
            if (nameResult == null)
                throw new ArgumentException(nameof(nameResult));
            if (function == null)
                throw new ArgumentException(nameof(function));
<# foreach(var i in vs) { #>

            if (name<#=i#> == null)
                throw new ArgumentException(nameof(name<#=i#>));
            var n<#=i#> = NameType.From<T<#=i#>>(name<#=i#>);
<# } #>

            builder.AddProcessor(function, NameType.From<TResult>(nameResult), <#=ns#>);
        }

        public static void AddProcessorExpression<<#=types#>, TResult>(
            this IDataProcessorBuilder builder,
<# foreach(var i in vs) { #>
            string name<#=i#>,
<# } #>
            string nameResult,
            Expression<Func<<#=types#>, Maybe<TResult>>> function)
        {
            if (builder == null)
                throw new ArgumentException(nameof(builder));
            if (nameResult == null)
                throw new ArgumentException(nameof(nameResult));
            if (function == null)
                throw new ArgumentException(nameof(function));
<# foreach(var i in vs) { #>

            if (name<#=i#> == null)
                throw new ArgumentException(nameof(name<#=i#>));
            var n<#=i#> = NameType.From<T<#=i#>>(name<#=i#>);
<# } #>

            builder.AddProcessor(function, NameType.From<TResult>(nameResult), <#=ns#>);
        }

        public static void AddProcessor<<#=types#>, TResult>(
            this IDataProcessorBuilder builder,
<# foreach(var i in vs) { #>
            string name<#=i#>,
<# } #>
            string nameResult,
            Func<<#=types#>, TResult> function)
        {
            if (builder == null)
                throw new ArgumentException(nameof(builder));
            if (nameResult == null)
                throw new ArgumentException(nameof(nameResult));
            if (function == null)
                throw new ArgumentException(nameof(function));
<# foreach(var i in vs) { #>

            if (name<#=i#> == null)
                throw new ArgumentException(nameof(name<#=i#>));
            var p<#=i#> = Expression.Parameter(typeof(T<#=i#>), name<#=i#>);
<# } #>

            var expr = Expression.Lambda<Func<<#=types#>, TResult>>(
                Expression.Invoke(
                    Expression.Constant(function), 
                    <#=ps#>),
                <#=ps#>);

            builder.AddProcessorExpression(<#=names#>, nameResult, expr);
        }

        public static void AddProcessor<<#=types#>, TResult>(
            this IDataProcessorBuilder builder,
<# foreach(var i in vs) { #>
            string name<#=i#>,
<# } #>
            string nameResult,
            Func<<#=types#>, Maybe<TResult>> function)
        {
            if (builder == null)
                throw new ArgumentException(nameof(builder));
            if (nameResult == null)
                throw new ArgumentException(nameof(nameResult));
            if (function == null)
                throw new ArgumentException(nameof(function));
<# foreach(var i in vs) { #>

            if (name<#=i#> == null)
                throw new ArgumentException(nameof(name<#=i#>));
            var p<#=i#> = Expression.Parameter(typeof(T<#=i#>), name<#=i#>);
<# } #>

            var expr = Expression.Lambda<Func<<#=types#>, Maybe<TResult>>>(
                Expression.Invoke(
                    Expression.Constant(function), 
                    <#=ps#>),
                <#=ps#>);

            builder.AddProcessorExpression(<#=names#>, nameResult, expr);
        }

<# } #>
    }
}